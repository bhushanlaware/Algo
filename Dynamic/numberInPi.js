function numbersInPi(pi, subs) {
  // Write your code here.
  const subSet = new Set(subs);
  const subMap = new Map();
  let count = 0;
  function findMinSpace(str) {
    if (!str) return 0;
    count++;

    if (subMap.has(str)) return subMap.get(str);
    let minSpaces = Infinity;
    for (let i = 0; i < str.length; i++) {
      const subStr = str.substring(0, i + 1);
      if (subSet.has(subStr)) {
        const remaingStr = str.substr(i + 1);
        minSpaces = Math.min(1 + findMinSpace(remaingStr), minSpaces);
      }
    }
    subMap.set(str, minSpaces);

    return minSpaces;
  }
  const minSpaces = findMinSpace(pi);
  // console.log(subMap)
  console.log(count)

  return minSpaces === Infinity ? -1 : minSpaces - 1;
}

const str = "3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706731415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170673141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067"
const n = numbersInPi(str, str.split(''));
console.log(n)
console.log(str.length)
